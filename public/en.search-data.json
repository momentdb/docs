{"/guide/":{"data":{"":" 用户使用指南涵盖 WireDB 的代码结构、数据库架构设计，以及服务的部署与优化方法。 运行优化需通过修改配置文件进行，用户需熟悉各项配置参数。 数据库运行时会生成数据文件，这些文件存储关键业务数据。 为确保数据安全，用户需掌握数据文件的管理方法，并遵循定期备份的操作规范。 "},"title":"使用指南"},"/guide/architecture/":{"data":{"":"数据库系统的核心作用在于高效地存储和管理数据，并支持从海量信息中快速检索所需记录。传统的 SQL 关系型数据库在数据规模持续增长的情况下，容易遭遇单机性能瓶颈。目前提升性能的主流做法多依赖垂直扩展增强单机硬件能力，而非水平扩展增加节点以线性扩容。由于其架构限制，关系型数据库在弹性扩展性方面存在障碍，难以充分适应多节点分布式环境。同时为满足 ACID 事务特性，这类系统在支持分布式事务处理时也面临一定的技术挑战。\n相比之下，NoSQL 数据库更适用于大规模数据存储和高吞吐、低延迟的应用场景。由于 NoSQL 不受固定数据结构和关系的限制，具有更灵活的扩展能力，并且支持节点的动态扩展，从而更好地适应分布式环境。无论是关系型 SQL 数据库还是 NoSQL 数据库，它们都有一个共同的核心组件存储引擎，这是数据库设计与实现的关键核心部分。\n目前数据库存储引擎可以分为两大类，一类是基于内存的 （In-Memory）实现，例如 Redis 和 Memcached 这类的将数据全部存储在内存中；另外一种则是类似于 MySQL 的 InnoDB 和 LevelDB 这种将数据存储在磁盘中。两者都有各自的优势和劣势，基于内存的存储引擎通常存储的数据量较少，但其访问速度往往比基于磁盘的存储引擎快好几个数量级，而基于磁盘的存储引擎访问速度较慢，但存储数据量要比内存引擎多几个数量级。通常内存的价格要比磁盘的贵很多，这也是在选择存储硬件时要考虑的成本问题。\n存储引擎的开发者需要权衡读写性能和硬件成本的同时，重点在于如何高效存储数据和检索数据。数据库的存储引擎相当于在操作系统文件系统之上，建立的一套用于数据组织、存储与查询的逻辑管理层，最终实现是依赖于操作系统的文件系统 API 接口的，最终数据是被持久化到磁盘文件中保存，这个就对应着 ACID 中的 Durability 数据持久性。\n持久性（Durability）是存储引擎最为至关重要的功能实现，目前很多基于内存版本的 NoSQL 数据库例如 Memcached 和 Redis 在这方面做的就比较差，在 NoSQL 服务器运行过程中突然崩溃断电就会导致数据没有被持久化存储的情况，从而导致数据丢失影响到上层的业务程序。","存储引擎#存储引擎":"综上所述，针对这些场景的问题 UrnaDB 采用了基于 Log-Structured Megre Tree 日志结构化文件系统的存储引擎实现，存储引擎会以 Append-Only Log 的方式将所有的数据操作写入到数据文件中。同时 UrnaDB 为了高速查询检索数据记录，存储引擎会将数据记录索引信息全部保存在内存中，从而实现高效快速的查询目标数据记录。这样的设计的好处是能以磁盘最大写入性能进行写入数据，并且还能减少读取磁盘索引所需要的时间，通过一次索引定位来读取数据记录，写入和查询流程图：\n其核心持久化机制基于预写日志 Write-Ahead Logging 简称 WAL ，在对数据执行任何操作前，都会先将操作记录写入 WAL 日志文件。WAL 文件不仅承担持久化的角色，也作为主要的数据存储载体。在数据库进程崩溃后，只需从 WAL 日志中顺序读取各条 Segment 记录，即可高效恢复内存中的索引结构。\n在 UrnaDB 中对这些 WAL 数据文件有一个统称为叫 Region 文件，这些文件有单个固定大小限制，当一个数据文件写满之后就会被关闭，会重新创建一个新的 Active 活跃的 Region 文件进行数据记录的进行写入。被关闭的 Region 文件会被视为冷数据文件，随着数据库不间断长时间运行 Region 文件会不断递增逐渐占用磁盘空间。此时数据库进程就需要对旧的 Region 文件执行压缩 Compaction 和定期清理，以降低存储压力并提高查崩溃数据恢复时的启动效率，压缩流程原理图：\n目前工业级的存储系统中，RaikDB 是一个采用类似模型实现的数据库产品，RaikDB 是基于 Amazon Dynamo 论文的设计理念构建而成。其 RaikDB 底层也是采用的顺序写入的日志式存储引擎，并将其命名为 Bitcask 存储模型，以提升写入性能和读写效率。\n该模型与 UrnaDB 所采用的存储引擎在设计理念上颇为相似。Bitcask 存储引擎在执行数据压缩 Compaction 时会生成 Hint 文件，其作用是在存储引擎重启时，辅助快速重建内存索引，从而避免每次启动都需全量扫描数据文件，显著提升系统的启动效率。然而 Hint 文件仅在 Compaction 过程中生成，所记录的只是当时内存索引的快照，无法反映实时状态。\n针对这一问题 UrnaDB 在存储引擎中进行了改进，将 Hint 文件机制替换为 Checkpoint 功能，系统会在固定时间间隔内，定期将当前内存索引持久化为 checkpoint 文件写入磁盘。当服务器进程发生异常崩溃，也可通过读取 checkpoint 快照快速恢复内存索引状态。在实际恢复流程中，UrnaDB 会优先加载最近一次的 checkpoint 快照，并从该时间点之后的 Region 文件中继续回放增量数据。通过这种方式，有效提升了系统启动恢复的速度，减少了启动耗时，同时兼顾了数据一致性与运行效率。\n在此存储引擎设计的基础上，UrnaDB 构建了内置的 HTTP 服务器，并引入了多种数据结构的抽象层，进一步构成了完整的 UrnaDB 产品体系。这些模块构成了一个相互协作、功能完善的 UrnaDB 产品，架构图如下：\n单机数据库的核心在于其存储引擎，负责实现数据的持久化，并高效地处理数据的写入与读取，是数据库系统性能与可靠性的基础保障。目前 UrnaDB 支持单机部署，适用于轻量级和中等规模的应用场景。未来版本将引入更复杂的数据库集群架构，包括分布式存储、多副本机制与高可用性支持，以满足在大规模数据处理、高并发访问以及故障容错方面的实际需求，从而逐步演进为一款支持横向扩展的分布式数据库系统。"},"title":"架构设计"},"/guide/configure/":{"data":{"":"通过配置文件的方式启动 UrnaDB 数据库，可以灵活调整各个组件的运行参数，并按需启用或关闭核心功能模块。UrnaDB 提供丰富的组件配置选项，方便用户根据实际需求进行精细化控制，以下是一个示例 config.yaml 配置文件内容：\nconfig.yamlport: 2668 # 服务 HTTP 协议端口 mode: \"std\" # 默认为 std 标准库，另外可以设置 mmap 模式（本功能待完善） path: \"/tmp/urnadb\" # 数据库文件存储目录 auth: \"Are we wide open to the world?\" # 访问 HTTP 协议的密钥 logpath: \"/tmp/urnadb/out.log\" # urnadb 在运行时程序产生的日志存储文件 debug: false # 是否开启 debug 模式 region: # 数据区 enable: true # 是否开启数据压缩功能 cron: \"0 0 3 * * *\" # 垃圾回收器执行周期改为 cron 的格式 threshold: 2 # 默认个数据文件大小，单位 GB encryptor: # 是否开启静态数据加密功能 enable: false secret: \"your-static-data-secret!\" compressor: # 是否开启静态数据压缩功能 enable: false checkpoint: # 是否开启索引定时快照功能 enable: false interval: 1800 # 每 30 分钟生成一次索引数据快照 allowip: # 白名单 IP 列表，可以去掉这个字段，去掉之后白名单就不会开启 - 192.168.31.221 - 192.168.101.225 - 192.168.101.226 - 127.0.0.1 ","数据加密#数据加密":"Region 区域对应的是磁盘上的数据文件，这些文件直接存储在运行 UrnaDB 数据库的服务器本地磁盘中，由于这些文件以普通文件形式存在，理论上任何拥有访问该服务器权限的用户都有可能读取它们的内容。这就引出了一个关键问题：如何有效防止这些敏感数据文件被未授权人员访问和泄露。\nencryptor: enable: false # 是否开启静态数据加密功能 secret: \"your-static-data-secret!\" # 静态加密的密钥 Warning\nUrnaDB 内置的加密算法采用 AES（Advanced Encryption Standard），使用 CBC（Cipher Block Chaining）模式进行数据加密。支持三种标准密钥长度：128 位、192 位和 256 位，其中 256 位密钥提供最高的安全等级。需要注意的是，密钥强度越高，相应的 CPU 资源消耗也会增加，可能影响运行时性能表现。","数据区#数据区":"Region 是 UrnaDB 中最核心的功能模块之一，其相关的配置参数用于控制数据区运行时的行为，例如可以通过配置启用或禁用 Region 的垃圾回收机制，并设置单个 Region 区域的最大容量限制；相关的配置选项节点是 region ：\nregion: # 数据区 enable: true # 是否开启数据压缩功能 cron: \"0 0 3 * * *\" # 垃圾回收器执行周期改为 cron 的格式 threshold: 2 # 默认个数据文件大小，单位 GB Warning\n在配置 Region 区域时，需要重点考虑是否启用存储引擎的垃圾回收功能。若不启用，长时间运行可能导致磁盘空间持续增长，占用过高。若启用垃圾回收功能，则需合理设置其执行周期：周期过长可能导致空间回收不及时，占用上升，并在压缩 Region 时耗时较长；周期过短则可能导致垃圾回收过于频繁，占用系统资源，影响存储引擎的整体性能。","数据压缩#数据压缩":"Region 区域对应的是磁盘上的数据文件，文件所存储的每条数据记录默认是未经过压缩的，这就意味随着数据增多，磁盘空间占用也会持续上升。针对这个问题 UrnaDB 存储引擎内置了数据压缩算法，开启 UrnaDB 存储引擎内置的数据压缩器功能，就会有效降低磁盘数据文件存储空间成本。\ncompressor: enable: false # 是否开启静态数据压缩功能 Warning\n同样如果开启了 UrnaDB 存储引擎内置的数据压缩器功能，相应的 CPU 资源消耗也会增加，可能影响运行时性能表现。","检查点恢复#检查点恢复":"由于 UrnaDB 数据库存储引擎采用将所有索引数据存储在内存中的设计，一旦数据库进程意外崩溃，内存中的索引信息将会丢失，未能持久化到磁盘。这样在下一次启动时，系统需要重新扫描所有数据文件，以重建内存中的索引结构，如果数据文件体量较大，将导致启动过程变得缓慢，启动耗时较长。\n为了解决这个问题，UrnaDB 数据库引入了 checkpoint 功能机制，通过定期将内存中的索引状态保存到磁盘，在发生异常重启时即可快速加载 checkpoint 文件，从而大幅缩短数据库的启动时间，相关的配置选项节点是 checkpoint ：\ncheckpoint: # 是否开启索引定时快照功能 enable: false interval: 1800 # 每 30 分钟生成一次索引数据快照 Warning\n开启 checkpoint 功能可以在数据库崩溃后显著加快启动恢复的速度。然而 checkpoint 文件的生成时间间隔设置同样需要谨慎权衡。如果生成间隔过短，将导致 checkpoint 文件过于频繁地写入磁盘，占用大量 I/O 资源，可能影响数据库的整体性能；而如果间隔设置过长，崩溃恢复时仍需扫描大量 Region 数据记录，反而无法发挥 checkpoint 的优势，导致启动时间较长。因此合理配置 checkpoint 的生成频率，需在性能开销与数据恢复效率之间做出平衡，建议根据实际业务的数据写入频率和系统负载，动态调整该参数以获得最佳效果。","访问控制#访问控制":"UrnaDB 通常部署在独立的 Linux 服务器上，并通过网络对外提供数据访问服务。将数据库服务直接暴露在公共网络中是一种高风险行为，这意味着任何人都可能尝试通过客户端连接访问 UrnaDB 数据库。除了基本的访问密钥认证机制外，UrnaDB 还提供了 IP 白名单安全策略，以增强整体系统的防护能力。\n通过 IP 白名单功能，将访问权限限制在可信任的 IP 名单内，就可以有效控制能访问 UrnaDB 数据库的人员范围，受信任的 IP 列表通过 allowip 配置选项进行设置：\nallowip: # 白名单 IP 列表，可以去掉这个字段，去掉之后白名单就不会开启 - 192.168.31.221 - 192.168.101.225 - 192.168.101.226 - 127.0.0.1 Warning\n如果不添加 allowip 配置节点，去掉这个字段白名单就不会开启，意味着任何人都可以访问到这台运行 UrnaDB 数据库主机。"},"title":"配置参数"},"/guide/data/":{"data":{"":"数据库系统建立在操作系统的文件子系统之上，是对底层文件的一种抽象，在数据库中，所有数据记录最终都会以文件的形式存储在物理磁盘中。因此高效地管理和维护数据库数据文件对于保障系统性能、数据安全与可靠性具有至关重要的意义。传统关系型数据库例如 MySQL 通常通过 mysqldump 等工具为数据管理提供备份与恢复支持，而 UrnaDB 的设计理念则有所不同，更强调由用户自行管理数据库文件本身，因为数据文件才是最核心最重要的资产。\n对于使用者而言，进行定期对数据文件的备份，不仅能够在磁盘故障时快速恢复数据，还可以在将 UrnaDB 数据库迁移到其他机器时，直接复制数据文件实现快速部署和恢复，无需额外的工具支持，下面为 UrnaDB 数据库在运行过程所产生的数据文件结构：\ndata/ ├── 0000000001.db ├── 0000000002.db ├── index.db ├── ckpt.1745325326.2.ids └── ckpt.1745328927.2.tmp 后缀名 作用说明 index.db 数据记录文件对应的索引记录文件。 *.db 数据记录文件随着时间推移文件名会递增。 *.ids 用于快速恢复内存索引记录的检查点文件。 *.tmp 检查点生成过程中的临时快照文件可以被清理掉。 out.log 最新的 urnadb 运行时程序产生的日志记录文件。 Important\n在数据文件的存储目录中，最核心的文件是以 *.db 为后缀的数据文件。这类文件至关重要不能丢失。相比之下，其他辅助文件（如索引或检查点文件）虽然能够提升性能或加快恢复速度，但在发生丢失时是可以容忍的。UrnaDB 在启动时，如果检测到其他辅助文件缺失，只要 *.db 数据文件仍然存在，就能够基于这些 *.db 文件自动重建索引和其他必要的数据文件，从而完成数据库的恢复过程。"},"title":"数据管理"},"/guide/deployment/":{"data":{"":"目前 UrnaDB 提供多种运行部署方式，包括基于 Docker 镜像的容器化部署和适用于 Linux 系统的可执行文件。作为 UrnaDB 的开发者，我更推荐在长期服务场景中采用 Linux 裸机部署。相比容器化方式，裸机部署能够更充分地利用系统资源，并支持用户根据实际需求灵活调优存储引擎参数，从而实现更高的性能稳定性与资源利用率。建议优先选择主流 Linux 发行版，如 RHEL、SUSE 或 Ubuntu，以获得最佳运行效率与服务保障。","docker-容器#Docker 容器":"使用 Docker 可以快速部署 urnadb:latest 的镜像来测试 UrnaDB 提供的服务，运行以下命令即可拉取 UrnaDB 镜像：\ndocker pull auula/urnadb:latest 运行 UrnaDB 镜像启动容器服务，并且映射端口到外部主机网络，执行下面的命令：\ndocker run -p 2668:2668 auula/urnadb:latest UrnaDB 提供使用 RESTful API 的方式进行数据交互，理论上任意具备 HTTP 协议的客户端都支持访问和操作 UrnaDB 服务实例。在调用 RESTful API 时需要在请求头中添加 Auth-Token 进行鉴权，该密钥由 UrnaDB 进程自动生成，可通过容器运行时日志获取，使用以下命令查看启动日志：\nroot@2c2m:~# docker logs 66ae91bc73a6 __ __ ___ ___ / / / /______ ___ _/ _ \\/ _ ) / /_/ / __/ _ \\/ _ `/ // / _ | \\____/_/ /_//_/\\_,_/____/____/ v1.1.2 UrnaDB is a NoSQL database support diverse data types and transactions. UrnaDB Software License: Apache 2.0 Website: https://urnadb.github.io [UrnaDB:C] 2023/06/04 18:35:15 [WARN] The default password is: QGVkh8niwL2TSkj72icaKBC9B [UrnaDB:C] 2023/06/04 18:35:15 [INFO] Logging output initialized successfully [UrnaDB:C] 2023/06/04 18:35:15 [INFO] Loading and parsing region data files... [UrnaDB:C] 2023/06/04 18:35:15 [INFO] Regions compression activated successfully [UrnaDB:C] 2023/06/04 18:35:15 [INFO] File system setup completed successfully [UrnaDB:C] 2023/06/04 18:35:15 [INFO] HTTP server started at http://192.168.31.221:2668 🚀 Important\n采用容器的方式运行有多的弊端：例如 UrnaDB 容器的数据目录和宿主机没有配置正确的映射关系，会导致每次重启之后数据丢失；另外一个问题就是 Docker 这种容器引擎会在正常关闭容器时引入超时机制，如果 UrnaDB 中的内存索引非常大的时候就会导致无法正常退出，Docker 默认超时机制会强制关闭 UrnaDB 所在容器，导致内存中数据无法正常持久化到磁盘。","linux-部署#Linux 部署":"推荐使用 UrnaDB 的最佳方式是通过 Linux 直接部署运行，如果测试阶段你使用的 Windows 系统可以使用虚拟机软件安装 Linux 系统进行测试，也可以使用 WSL 的方式使用 Windows 中的 Ubuntu 子系统进行测试。UrnaDB 的软件包可以从 GitHub 的 Releases 页面下载，下载得到的是 zip 压缩包，使用 unzip 命令对压缩包进行解压，命令如下：\nunzip urnadb-linux-amd64.zip 解压完成之后将获得对应的 UrnaDB 二进制可执行文件，可直接使用该文件启动 UrnaDB 数据库服务进程，启动命令如下：\n./urnadb --config=config.yaml Important\n在启动 UrnaDB 数据库进程时可以通过命令行传入多个的参数，这些参数可以调整 UrnaDB 数据库一些运行参数和必要配置信息，如果什么都不传入直接启动 UrnaDB 数据库进程，被启动的 UrnaDB 进程会直接使用内置的默认参数进行运行。\n下面是 UrnaDB 数据库进程在启动时能支持传入的命令行参数说明表格：\n参数 作用说明 –config 指定自定义配置文件路径 –port 指定服务器所监听的端口号 –auth 指定客户端连接时所需要认证密钥 –daemon 指定是否使用后台守护进程方式运行 –debug 开启日志跟踪调试程序运行状态 例如使用后台守护进程并且指定认证密钥的方式启动一个 UrnaDB 的数据库进程，命令如下：\n./urnadb --auth=password --daemon Tip\n相比仅通过命令行传入参数的方式，UrnaDB 还支持通过配置文件进行引导启动，也就是上面的 --config 参数。配置文件支持更丰富的参数选项，使用户能够更加精细地控制运行时的各项设置，从而实现更灵活、更精准的部署与调优，可以阅读下一章节的内容了解更多详情。"},"title":"部署运行"},"/guide/layout/":{"data":{"":"UrnaDB 项目由多个核心组件构成，正如前文架构设计中所述，采用了模块化的设计理念。每个组件在功能上相对独立，并以单独的 Go 包（Package）形式组织在项目中，各个模块之间通过明确的接口定义进行协作，形成清晰的依赖关系。在实际使用时，通常通过对应组件提供的构造函数进行初始化，从而实现灵活的组合与扩展。\nUrnaDB 项目的模块组织结构如下：\n. ├── Dockerfile # 定义容器镜像的构建方式（用于部署 UrnaDB 的运行环境） ├── LICENSE # 项目的开源许可证信息 ├── README.md # 项目简介、安装使用说明、贡献指南等文档 ├── clog # 自定义日志系统，可能封装了日志格式、输出等级等 ├── cmd # 应用 CLI 程序的入口，定义 CLI 主命令、程序解析参数初始化 ├── conf # 存放配置模板、初始化配置文件等资源 ├── config.yaml # 主配置文件，定义数据库的行为参数（如端口、路径、选项等） ├── docker-compose.yml # 多服务容器编排文件，定义 UrnaDB 与依赖服务的运行方式 ├── go.mod # Go Modules 依赖描述文件（声明项目模块名和依赖包） ├── go.sum # Go Modules 依赖校验文件（记录版本哈希） ├── server # 核心服务逻辑实现，比如网络服务监听、事物请求处理器 ├── tests # 单元测试与集成测试所需要的资源文件 ├── tools.sh # 辅助脚本，例如构建、性能测试、单元测试等工具集合 ├── types # 定义通用的数据结构和类型，用于业务程序数据结构的抽象 ├── urnadb.go # 应用程序主入口文件，启动 UrnaDB 一个数据库进程实例 ├── utils # 工具函数集合，如字符串处理、错误封装、文件工具等 └── vfs # 虚拟文件系统模块，存储引擎抽象了底层文件 I/O 操作 Important\n对于普通用户而言，并不需要了解 UrnaDB 的源代码结构和实现细节。而本节内容主要面向希望深入理解 UrnaDB 内部架构、并有意参与贡献的开发者。如果你对 UrnaDB 项目感兴趣，欢迎提出改进建议或提交代码。你可以通过 GitHub 的 Issues 提交反馈或建议，也可以通过 Pull Request 的方式贡献代码，作为核心开发者我鼓励社区参与共同完善 UrnaDB 数据库！"},"title":"项目结构"},"/sdk/":{"data":{"":"这里介绍整个服务器的架构设计和运行方式，如何配置长期运行的服务"},"title":"使用 SDK"},"/sdk/java-sdk/":{"data":{"":"这里介绍整个服务器的架构设计和运行方式，如何配置长期运行的服务"},"title":"Java SDK"}}